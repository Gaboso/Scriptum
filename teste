package com.app.visual;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Admin on 19/04/2017.
 */
public class Teste {

    public static void main(String[] args) {
        Teste teste = new Teste();
        List<File> foldersFromWorkspace = teste.getFoldersFromWorkspace("C:\\Users\\Admin\\IdeaProjects");

        for (File file : foldersFromWorkspace) {
            teste.analyzeFolders(file);
        }
    }

    private List<File> getFoldersFromWorkspace(String path) {
        File fileInitial = new File(path);
        File[] listFiles = fileInitial.listFiles();
        List<File> folders = new ArrayList<>();

        if (listFiles != null) {
            for (File file : listFiles) {
                if (file.isDirectory()) {
                    folders.add(file);
                }
            }
        }

        return folders;
    }

    private void analyzeFolders(File file) {
        File[] listFiles = file.listFiles();

        if (listFiles != null) {
            for (File fileFromList : listFiles) {

                if (fileFromList.isDirectory() && fileFromList.getName().contains(".git"))
                    executeCMD("cd " + file.getPath() + "\\ && git fetch && git pull origin");

                if ("pom.xml".equals(fileFromList.getName()))
                    executeCMD("cd " + file.getPath() + "\\ && mvn clean install -DskipTests=true");

                if ("package.json".equals(fileFromList.getName()))
                    executeCMD("cd " + file.getPath() + "\\ && npm install && npm update");

                if ("bower.json".equals(fileFromList.getName()))
                    executeCMD("cd " + file.getPath() + "\\ && bower install && bower update");
            }
        }
    }

    private void executeCMD(String cmd) {
        ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", cmd);
        builder.redirectErrorStream(true);

        try {
            Process p = builder.start();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;

            while (true) {
                line = r.readLine();
                if (line == null) {
                    break;
                }
                System.out.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}